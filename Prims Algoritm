class PrimsAlgorithm: 
    def _init_(self, vertices): 
        self.V = vertices 
        self.graph = [[0] * vertices for _ in range(vertices)] 
 
    def add_edge(self, u, v, weight): 
        self.graph[u][v] = weight 
        self.graph[v][u] = weight  
 
    def min_key(self, key, mst_set): 
        min_val = float('inf') 
        min_index = -1 
        for v in range(self.V): 
            if not mst_set[v] and key[v] < min_val: 
                min_val = key[v] 
                min_index = v 
        return min_index 
 
    def prim_mst(self): 
        key = [float('inf')] * self.V 
        parent = [-1] * self.V 
        mst_set = [False] * self.V 
        key[0] = 0 
 
        for _ in range(self.V): 
            u = self.min_key(key, mst_set) 
            mst_set[u] = True 
 
            for v in range(self.V): 
                if 0 < self.graph[u][v] < key[v] and not mst_set[v]: 
                    key[v] = self.graph[u][v] 
                    parent[v] = u 
 
        print("Edge \tWeight") 
        for i in range(1, self.V): 
            print(f"{parent[i]} - {i} \t{self.graph[i][parent[i]]}") 
 

g = PrimsAlgorithm(4) 
g.add_edge(0, 1, 10) 
g.add_edge(0, 2, 6) 
g.add_edge(0, 3, 5) 
g.add_edge(1, 3, 15) 
g.add_edge(2, 3, 4) 
 
g.prim_mst()
