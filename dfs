from collections import deque

graph = {"5": ["3", "7"], "3": ["2", "4"], "7": ["8"], "2": [], "4": ["8"], "8": []}

def DFS(graph, node):
    stack = [node]
    visited = set()

    print("\nOrder of visited nodes by DFS:", end=" ")

    while stack:
        s = stack.pop()
        if s not in visited:
            visited.add(s)
            print(s, end=" ")
            # Add neighbors in reverse to maintain left-to-right traversal
            for neighbour in reversed(graph[s]):
                if neighbour not in visited:
                    stack.append(neighbour)

def BFS(graph, node):
    queue = deque([node])
    visited = set([node])

    print("\nOrder of visited nodes by BFS:", end=" ")

    while queue:
        m = queue.popleft()
        print(m, end=" ")

        for neighbour in graph[m]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)

BFS(graph, "5")
DFS(graph, "5")
