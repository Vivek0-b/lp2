import heapq

def astaralgo(start_node, stop_node):
    # Priority queue for open set
    open_set = []
    heapq.heappush(open_set, (0, start_node))
    
    # Closed set
    closed_set = set()
    
    # Cost from start to each node
    g = {start_node: 0}
    
    # Parent dictionary to reconstruct the path
    parents = {start_node: None}
    
    while open_set:
        # Get the node with the lowest f(n) = g(n) + h(n)
        _, n = heapq.heappop(open_set)
        
        # If stop node is reached, construct the path
        if n == stop_node:
            path = []
            while n is not None:
                path.append(n)
                n = parents[n]
            path.reverse()
            print("Path found: {}".format(path))
            return path
        
        # Add n to the closed set
        closed_set.add(n)
        
        # Process each neighbor of n
        for (m, weight) in get_neighbors(n):
            if m in closed_set:
                continue
            
            # Calculate tentative g score
            tentative_g = g[n] + weight
            
            if m not in g or tentative_g < g[m]:
                # Update g and parent
                g[m] = tentative_g
                parents[m] = n
                
                # Add to open set with priority f(m) = g(m) + h(m)
                heapq.heappush(open_set, (g[m] + heuristic(m), m))
    
    print("Path does not exist!")
    return None

def get_neighbors(v):
    return Graph_nodes.get(v, [])

def heuristic(n):
    H_dist = {
        'A': 11,
        'B': 6,
        'C': 99,
        'D': 1,
        'E': 7,
        'G': 0,
    }
    return H_dist.get(n, float('inf'))

Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1), ('G', 9)],
    'C': [],
    'E': [('D', 6)],
    'D': [('G', 1)],
}

# Run the algorithm
astaralgo('A', 'G')






import heapq  # Priority queue implementation for efficient node selection

def astar_algorithm(start_node, stop_node):
    """
    Function to implement the A* algorithm.

    Parameters:
    start_node: Starting point of the search
    stop_node: Goal node

    Returns:
    path: A list representing the shortest path from start_node to stop_node
    """
    # Priority queue (open set) to store nodes to be explored. Format: (f(n), node)
    open_set = []
    heapq.heappush(open_set, (0, start_node))
    
    # Set to keep track of visited nodes
    closed_set = set()
    
    # Stores the shortest distance from the start node to each node
    g_score = {start_node: 0}
    
    # Stores the parent of each node for reconstructing the path
    parents = {start_node: None}
    
    while open_set:
        # Get the node with the smallest f(n) = g(n) + h(n)
        _, current_node = heapq.heappop(open_set)
        
        # If we reach the goal, reconstruct and return the path
        if current_node == stop_node:
            path = []
            while current_node is not None:
                path.append(current_node)
                current_node = parents[current_node]
            path.reverse()  # Reverse to get the path from start to goal
            print("Path found:", path)
            return path
        
        # Add the current node to the closed set
        closed_set.add(current_node)
        
        # Process each neighbor of the current node
        for neighbor, weight in get_neighbors(current_node):
            if neighbor in closed_set:
                continue  # Skip already processed nodes
            
            # Calculate tentative g(n) for the neighbor
            tentative_g_score = g_score[current_node] + weight
            
            # If neighbor not in g_score or a shorter path is found
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                # Update g(n) and parent of the neighbor
                g_score[neighbor] = tentative_g_score
                parents[neighbor] = current_node
                 # Calculate f(n) = g(n) + h(n) and add neighbor to open set
                f_score = tentative_g_score + heuristic(neighbor)
                heapq.heappush(open_set, (f_score, neighbor))
    
    # If we exhaust the open set without finding the goal, return failure
    print("Path does not exist!")
    return None
def get_neighbors(node):
    """
    Returns the neighbors and their weights for a given node.
    """
    return Graph_nodes.get(node, [])

def heuristic(node):
    """
    Heuristic function that estimates the cost to reach the goal node.
    """
    H_dist = {
        'A': 11,
        'B': 6,
        'C': 99,
        'D': 1,
        'E': 7,
        'G': 0,  # Goal node has a heuristic of 0
    }
    return H_dist.get(node, float('inf'))  # Default to infinity if node not in heuristic

# Define the graph as an adjacency list
Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1), ('G', 9)],
    'C': [],
    'E': [('D', 6)],
    'D': [('G', 1)],
}

# Run the A* algorithm
astar_algorithm('A', 'G')
