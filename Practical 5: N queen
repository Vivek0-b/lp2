# bACKTRACKING APPROACH 

import copy
import random

def take_input():
    while True:
        try:
            n = int(input('Input size of chessboard? n = '))
            if n <= 3:
                print("Enter a value greater than or equal to 4")
                continue
            return n
        except ValueError:
            print("Invalid value entered. Enter again")

def get_board(n):
    board = ["x"]*n
    for i in range(n):
        board[i] = ["x"]*n
    return board

def print_solution(solutions, n):
    x = random.randint(0,len(solutions)-1)         #pick random index between 0 and length
    for row in solutions[x]:
        print(" ".join(row))

def solve(board, col, n):
    if col >= n:
        return
    
    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = "Q"
            if col == n-1:
                add_solution(board)
                board[i][col] = "x"
                return
            solve(board, col+1, n)
            board[i][col] = "x"
            
def is_safe(board, row, col, n):
    for j in range(col):
        if board[row][j] == "Q":
            return False
    
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == "Q":
            return False
        i=i-1
        j=j-1
    
    x, y = row,col
    while x < n and y >= 0:
        if board[x][y] == "Q":
            return False
        x=x+1
        y=y-1
    
    return True

def add_solution(board):
    global solutions
    saved_board = copy.deepcopy(board)
    solutions.append(saved_board)

n = take_input()
board = get_board(n)
solutions = []
solve(board, 0, n)

print("\nOne of the solutions is: \n")
print_solution(solutions, n)

print()
print("Total number of solutions=", len(solutions))
















# BRANCH AND NOUND APPROACH

# Branch and Bound approach for solving N-Queens problem

def is_safe(board, row, col, n):
    # Check if it's safe to place a queen at (row, col)
    for i in range(row):
        if board[i] == col or board[i] - i == col - row or board[i] + i == col + row:
            return False
    return True

def branch_and_bound(board, row, n, min_conflict_board):
    if row == n:
        return True
    
    # Sort columns by least conflicts (for branch and bound)
    columns = list(range(n))
    min_conflicts = n  # Start with the worst case
    
    for col in columns:
        if is_safe(board, row, col, n):
            board[row] = col
            # Find the minimum conflicts for next rows
            conflicts = 0
            for r in range(row + 1, n):
                if not is_safe(board, r, col, n):
                    conflicts += 1
            if conflicts < min_conflicts:
                min_conflicts = conflicts
                if branch_and_bound(board, row + 1, n, min_conflict_board):
                    return True
            board[row] = -1  # Backtrack
    
    return False

def print_solution(board, n):
    for i in range(n):
        row = ['Q' if x == board[i] else '.' for x in range(n)]
        print(" ".join(row))

def n_queens_branch_and_bound(n):
    # Create a board with n rows and n columns, initialize all values to -1
    board = [-1] * n
    
    # Solve the problem
    if branch_and_bound(board, 0, n, []):
        print_solution(board, n)
    else:
        print("Solution does not exist")

# Example usage
n = 4  # Try 4-Queens
n_queens_branch_and_bound(n)

